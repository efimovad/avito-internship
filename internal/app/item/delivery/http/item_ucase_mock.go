// Code generated by MockGen. DO NOT EDIT.
// Source: internal/app/item/usecase.go

// Package item_handler is a generated GoMock package.
package item_handler

import (
	model "github.com/efimovad/avito-internship/internal/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockItemUsecase is a mock of Usecase interface
type MockItemUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockItemUsecaseMockRecorder
}

// MockItemUsecaseMockRecorder is the mock recorder for MockItemUsecase
type MockItemUsecaseMockRecorder struct {
	mock *MockItemUsecase
}

// NewMockItemUsecase creates a new mock instance
func NewMockItemUsecase(ctrl *gomock.Controller) *MockItemUsecase {
	mock := &MockItemUsecase{ctrl: ctrl}
	mock.recorder = &MockItemUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockItemUsecase) EXPECT() *MockItemUsecaseMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockItemUsecase) Create(item *model.Item) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", item)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockItemUsecaseMockRecorder) Create(item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockItemUsecase)(nil).Create), item)
}

// Get mocks base method
func (m *MockItemUsecase) Get(id int64, allInfo bool) (*model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", id, allInfo)
	ret0, _ := ret[0].(*model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get
func (mr *MockItemUsecaseMockRecorder) Get(id, allInfo interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockItemUsecase)(nil).Get), id, allInfo)
}

// List mocks base method
func (m *MockItemUsecase) List(params model.Params) ([]model.Item, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", params)
	ret0, _ := ret[0].([]model.Item)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockItemUsecaseMockRecorder) List(params interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockItemUsecase)(nil).List), params)
}
